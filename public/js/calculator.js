/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var calculator = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"block":4,"DOT":5,"EOF":6,"consts":7,"vars":8,"proclists":9,"statement":10,"CONST":11,"constant_n":12,"constlist":13,";":14,",":15,"ID":16,"=":17,"number":18,"VAR":19,"varmore":20,"decl_proc":21,"arguments":22,"PROCEDURE":23,"(":24,")":25,"expression":26,"CALL":27,"BEGIN":28,"statementlist":29,"END":30,"IF":31,"condition":32,"THEN":33,"WHILE":34,"DO":35,"+":36,"-":37,"*":38,"/":39,"^":40,"%":41,"E":42,"PI":43,"ODD":44,"==":45,"#":46,"<":47,"<=":48,">":49,">=":50,"NUMBER":51,"$accept":0,"$end":1},
terminals_: {2:"error",5:"DOT",6:"EOF",11:"CONST",14:";",15:",",16:"ID",17:"=",19:"VAR",23:"PROCEDURE",24:"(",25:")",27:"CALL",28:"BEGIN",30:"END",31:"IF",33:"THEN",34:"WHILE",35:"DO",36:"+",37:"-",38:"*",39:"/",40:"^",41:"%",42:"E",43:"PI",44:"ODD",45:"==",46:"#",47:"<",48:"<=",49:">",50:">=",51:"NUMBER"},
productions_: [0,[3,3],[4,4],[7,0],[7,4],[13,0],[13,3],[12,3],[8,0],[8,4],[20,0],[20,3],[9,0],[9,6],[21,2],[22,0],[22,4],[10,3],[10,3],[10,4],[10,4],[10,4],[29,0],[29,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,2],[26,3],[26,1],[26,1],[26,1],[26,1],[32,2],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[18,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: 
          this.$ = $$[$0-2];
          return this.$;
        
break;
case 2:
          $$[$0-3] ? c = $$[$0-3] : c = 'NULL'
          $$[$0-2] ? v = $$[$0-2] : v = 'NULL'
          $$[$0-1] ? p = $$[$0-1] : p = 'NULL'
          
           this.$ = {
                type: 'BLOCK',
                consts: c,
                vars: v,
                procs: p,
                stat: $$[$0]
           };
       
break;
case 4:
          list = [$$[$0-2]];
          if ($$[$0-1] && $$[$0-1].length > 0)
             list = list.concat($$[$0-1]);
          this.$ = {
             type: 'CONST',
             consts: list
          };
       
break;
case 6:
          this.$ = [$$[$0-1]];
          if ($$[$0] && $$[$0].length > 0)
             this.$ = this.$.concat($$[$0]);
       
break;
case 7:
    symbol_e[Index].push({type: 'CONST',id: $$[$0-2],value: $$[$0].value});
    this.$ = {
        id: $$[$0-2],
        value: $$[$0].value
    };

break;
case 9:
          vl = [$$[$0-2]];
           symbol_e[Index].push({type: 'VAR', id: $$[$0-2] ,value: null});
           if ($$[$0-1] && $$[$0-1].length > 0){
               vl = vl.concat($$[$0-1]);
           }
           this.$ = {
             type: 'VAR',
             var_list: vl
          };
       
break;
case 11:
          symbol_e[Index].push({type: 'VAR', id: $$[$0-1] ,value: null});
          this.$ = [$$[$0-1]];
          if ($$[$0] && $$[$0].length > 0){
             this.$ = this.$.concat($$[$0]);
          }
       
break;
case 13:
         symbol_table[$$[$0-5].name] = {
            type: $$[$0-5].type,
            name: $$[$0-5].name,
            arguments: $$[$0-4],
            bloque: $$[$0-2],
            value: $$[$0-2].value
         };
         this.$ = symbol_table[$$[$0-5].name];
         downIndex();
      
break;
case 14:
         upIndex();
          symbol_table[$$[$0]] ={type: 'PROCEDURE', value: -1};
         this.$ = {
            type: $$[$0-1],
            name: $$[$0]
         };
      
break;
case 16:
         this.$ = [$$[$0-2]]
         if ($$[$0-1] && $$[$0-1].length > 0)
             this.$ = this.$.concat($$[$0-1]);
      
break;
case 17:
           var obj = null;
           var i;
           for (i=0;i<symbol_e[Index].length;i++){
               if(symbol_e[0][i].id == $$[$0-2]){
                   obj = symbol_e[0][i];
                   symbol_e[0][i].value = $$[$0].value;
               }
               if(symbol_e[Index][i].id == $$[$0-2]){
                   obj = symbol_e[Index][i];
                   symbol_e[Index][i].value = $$[$0].value;
               }
           }
           if (!obj){
               throw new Error("No se ha definido "+$$[$0-2]);
           }
           if (obj.type == 'CONST'){
               throw new Error("Las constantes no pueden ser redefinidas "+$$[$0-2]);
           }
           if (obj.type != 'VAR'){
               throw new Error("No se ha definido como variable: "+$$[$0-2]);
           }
           //throw new Error(JSON.stringify(symbol_e));
           this.$ = {
            type: $$[$0-1],
            value: obj.value,
            right: $$[$0-2],
            left: $$[$0]
           };

      
break;
case 18:
         if (!symbol_table[$$[$0-1]])
            throw new Error("No existe el procedimiento"+$$[$0-1]);
         this.$ = {
           type: $$[$0-2],
           name: $$[$0-1],
           arguments: $$[$0],
           value: symbol_table[$$[$0-1]].value
         };
      
break;
case 19:
         sl = [$$[$0-2]];
         if ($$[$0-1] && $$[$0-1].length > 0)
             sl = sl.concat($$[$0-1]);
         this.$ = {
            type: $$[$0-3],
            statement_list: sl
         };
      
break;
case 20:
         this.$ = {
            type: $$[$0-3],
            cond: $$[$0-2],
            st: ($$[$0-2].value == 1) ? $$[$0] : 'NULL',
            value: ($$[$0-2].value == 1) ? $$[$0].value : 0
         };
      
break;
case 21:
         this.$ = {
            type: $$[$0-3],
            cond: $$[$0-2],
            st: ($$[$0-2].value == 1) ? $$[$0] : 'NULL',
            value: ($$[$0-2].value == 1) ? $$[$0].value : 0
         };
      
break;
case 23:
          this.$ = [$$[$0-1]];
          if ($$[$0] && $$[$0].length > 0)
             this.$ = this.$.concat($$[$0]);
       
break;
case 24:
    var obj = null;
    var i;
    for (i=0;i<symbol_e[Index].length;i++){
        if(symbol_e[Index][i].id == $$[$0-2]){
            obj = symbol_e[Index][i];
            symbol_e[Index][i].value = $$[$0].value;
        }
        if(symbol_e[0][i].id == $$[$0-2]){
            obj = symbol_e[0][i];
            symbol_e[0][i].value = $$[$0].value;
        }
    }
    if (!obj){
        throw new Error("No se ha definido "+$$[$0-2]);
    }
    if (obj.type == 'CONST'){
        throw new Error("Las constantes no pueden ser redefinidas "+$$[$0-2]);
    }
    if (obj.type != 'VAR'){
        throw new Error("No se ha definido como variable: "+$$[$0-2]);
    }
    //throw new Error(JSON.stringify(symbol_e));
    this.$ = {
    type: $$[$0-1],
    value: obj.value,
    right: $$[$0-2],
    left: $$[$0]
    };


break;
case 25:
    if($$[$0-2].value == null | $$[$0].value == null){
        throw new Error("No se puede realizar operaciones con variables sin inicializar");
    }
    this.$ = {
    type: $$[$0-1],
    left: $$[$0-2],
    right: $$[$0],
    value: $$[$0-2].value + $$[$0].value
    };

break;
case 26:
    if($$[$0-2].value == null | $$[$0].value == null){
        throw new Error("No se puede realizar operaciones con variables sin inicializar");
    }
    this.$ = {
    type: $$[$0-1],
    left: $$[$0-2],
    right: $$[$0],
    value: $$[$0-2].value - $$[$0].value
    };

break;
case 27:
    if($$[$0-2].value == null | $$[$0].value == null){
        throw new Error("No se puede realizar operaciones con variables sin inicializar");
    }
    this.$ = {
    type: $$[$0-1],
    left: $$[$0-2],
    right: $$[$0],
    value: $$[$0-2].value * $$[$0].value
    };

break;
case 28:
    if($$[$0-2].value == null | $$[$0].value == null){
        throw new Error("No se puede realizar operaciones con variables sin inicializar");
    }
    if ($$[$0].value == 0) throw new Error("Division by zero, error!");
    this.$ = {
    type: $$[$0-1],
    left: $$[$0-2],
    right: $$[$0],
    value: $$[$0-2].value / $$[$0].value
    };

break;
case 29:
    if($$[$0-2].value == null | $$[$0].value == null){
        throw new Error("No se puede realizar operaciones con variables sin inicializar");
    }
    this.$ = {
    type: $$[$0-1],
    left: $$[$0-2],
    right: $$[$0],
    value: Math.pow($$[$0-2].value, $$[$0].value)
    };

break;
case 30:
    this.$ = {
    type: $$[$0],
    left: $$[$0-1],
    right: $$[$01],
    value: $$[$0-1].value/100
    };

break;
case 31:this.$ = {
type: 'MINUS',
value: -$$[$0].value
};
break;
case 32:this.$ = $$[$0-1];
break;
case 33:this.$ = $$[$0];
break;
case 34:this.$ = {name: $$[$0], value: Math.E};
break;
case 35:this.$ = {name: $$[$0], value: Math.PI};
break;
case 36:
    var obj = null;
    var i;
    for (i=0;i<symbol_e[Index].length;i++){
        if(symbol_e[Index][i].id == $$[$0]){
            obj = symbol_e[Index][i].value;
        }
    }
    this.$ = {
    type: 'ID',
    name: $$[$0],
    value: obj
    }
    ;

break;
case 37:
         this.$ = {
            type: $$[$0-1],
            right: $$[$0],
            value: odd($$[$0].value)
         };
      
break;
case 38:
         this.$ = {
            type: 'COMPARISSON ==',
            left: $$[$0-2],
            right: $$[$0],
            value: ($$[$0-2].value == $$[$0].value) ? 1 : 0
         };
      
break;
case 39:
         this.$ = {
            type: 'COMPARISSON #',
            left: $$[$0-2],
            right: $$[$0],
            value: ($$[$0-2].value != $$[$0].value) ? 1 : 0
         };
      
break;
case 40:
         this.$ = {
            type: 'COMPARISSON <',
            left: $$[$0-2],
            right: $$[$0],
            value: ($$[$0-2].value < $$[$0].value) ? 1 : 0
         };
      
break;
case 41:
         this.$ = {
            type: 'COMPARISSON <=',
            left: $$[$0-2],
            right: $$[$0],
            value: ($$[$0-2].value <= $$[$0].value) ? 1 : 0
         };
      
break;
case 42:
         this.$ = {
            type: 'COMPARISSON >',
            left: $$[$0-2],
            right: $$[$0],
            value: ($$[$0-2].value > $$[$0].value) ? 1 : 0
         };
      
break;
case 43:
         this.$ = {
            type: 'COMPARISSON >=',
            left: $$[$0-2],
            right: $$[$0],
            value: ($$[$0-2].value >= $$[$0].value) ? 1 : 0
         };
      
break;
case 44: this.$ = {
                      type: 'NUMBER',
                      value: Number(yytext)
                    };
             
break;
}
},
table: [{3:1,4:2,7:3,11:[1,4],16:[2,3],19:[2,3],23:[2,3],27:[2,3],28:[2,3],31:[2,3],34:[2,3]},{1:[3]},{5:[1,5]},{8:6,16:[2,8],19:[1,7],23:[2,8],27:[2,8],28:[2,8],31:[2,8],34:[2,8]},{12:8,16:[1,9]},{6:[1,10]},{9:11,16:[2,12],21:12,23:[1,13],27:[2,12],28:[2,12],31:[2,12],34:[2,12]},{16:[1,14]},{13:15,14:[2,5],15:[1,16]},{17:[1,17]},{1:[2,1]},{10:18,16:[1,19],27:[1,20],28:[1,21],31:[1,22],34:[1,23]},{14:[2,15],22:24,24:[1,25]},{16:[1,26]},{14:[2,10],15:[1,28],20:27},{14:[1,29]},{12:30,16:[1,9]},{18:31,51:[1,32]},{5:[2,2],14:[2,2]},{17:[1,33]},{16:[1,34]},{10:35,16:[1,19],27:[1,20],28:[1,21],31:[1,22],34:[1,23]},{16:[1,39],18:42,24:[1,41],26:38,32:36,37:[1,40],42:[1,43],43:[1,44],44:[1,37],51:[1,32]},{16:[1,39],18:42,24:[1,41],26:38,32:45,37:[1,40],42:[1,43],43:[1,44],44:[1,37],51:[1,32]},{14:[1,46]},{16:[1,47]},{14:[2,14],24:[2,14]},{14:[1,48]},{16:[1,49]},{16:[2,4],19:[2,4],23:[2,4],27:[2,4],28:[2,4],31:[2,4],34:[2,4]},{13:50,14:[2,5],15:[1,16]},{14:[2,7],15:[2,7]},{5:[2,44],14:[2,44],15:[2,44],25:[2,44],30:[2,44],33:[2,44],35:[2,44],36:[2,44],37:[2,44],38:[2,44],39:[2,44],40:[2,44],41:[2,44],45:[2,44],46:[2,44],47:[2,44],48:[2,44],49:[2,44],50:[2,44]},{16:[1,39],18:42,24:[1,41],26:51,37:[1,40],42:[1,43],43:[1,44],51:[1,32]},{5:[2,15],14:[2,15],22:52,24:[1,25],30:[2,15]},{14:[1,54],29:53,30:[2,22]},{33:[1,55]},{16:[1,39],18:42,24:[1,41],26:56,37:[1,40],42:[1,43],43:[1,44],51:[1,32]},{36:[1,63],37:[1,64],38:[1,65],39:[1,66],40:[1,67],41:[1,68],45:[1,57],46:[1,58],47:[1,59],48:[1,60],49:[1,61],50:[1,62]},{5:[2,36],14:[2,36],17:[1,69],25:[2,36],30:[2,36],33:[2,36],35:[2,36],36:[2,36],37:[2,36],38:[2,36],39:[2,36],40:[2,36],41:[2,36],45:[2,36],46:[2,36],47:[2,36],48:[2,36],49:[2,36],50:[2,36]},{16:[1,39],18:42,24:[1,41],26:70,37:[1,40],42:[1,43],43:[1,44],51:[1,32]},{16:[1,39],18:42,24:[1,41],26:71,37:[1,40],42:[1,43],43:[1,44],51:[1,32]},{5:[2,33],14:[2,33],25:[2,33],30:[2,33],33:[2,33],35:[2,33],36:[2,33],37:[2,33],38:[2,33],39:[2,33],40:[2,33],41:[2,33],45:[2,33],46:[2,33],47:[2,33],48:[2,33],49:[2,33],50:[2,33]},{5:[2,34],14:[2,34],25:[2,34],30:[2,34],33:[2,34],35:[2,34],36:[2,34],37:[2,34],38:[2,34],39:[2,34],40:[2,34],41:[2,34],45:[2,34],46:[2,34],47:[2,34],48:[2,34],49:[2,34],50:[2,34]},{5:[2,35],14:[2,35],25:[2,35],30:[2,35],33:[2,35],35:[2,35],36:[2,35],37:[2,35],38:[2,35],39:[2,35],40:[2,35],41:[2,35],45:[2,35],46:[2,35],47:[2,35],48:[2,35],49:[2,35],50:[2,35]},{35:[1,72]},{4:73,7:3,11:[1,4],16:[2,3],19:[2,3],23:[2,3],27:[2,3],28:[2,3],31:[2,3],34:[2,3]},{15:[1,28],20:74,25:[2,10]},{16:[2,9],23:[2,9],27:[2,9],28:[2,9],31:[2,9],34:[2,9]},{14:[2,10],15:[1,28],20:75,25:[2,10]},{14:[2,6]},{5:[2,17],14:[2,17],30:[2,17],36:[1,63],37:[1,64],38:[1,65],39:[1,66],40:[1,67],41:[1,68]},{5:[2,18],14:[2,18],30:[2,18]},{30:[1,76]},{10:77,16:[1,19],27:[1,20],28:[1,21],31:[1,22],34:[1,23]},{10:78,16:[1,19],27:[1,20],28:[1,21],31:[1,22],34:[1,23]},{33:[2,37],35:[2,37],36:[1,63],37:[1,64],38:[1,65],39:[1,66],40:[1,67],41:[1,68]},{16:[1,39],18:42,24:[1,41],26:79,37:[1,40],42:[1,43],43:[1,44],51:[1,32]},{16:[1,39],18:42,24:[1,41],26:80,37:[1,40],42:[1,43],43:[1,44],51:[1,32]},{16:[1,39],18:42,24:[1,41],26:81,37:[1,40],42:[1,43],43:[1,44],51:[1,32]},{16:[1,39],18:42,24:[1,41],26:82,37:[1,40],42:[1,43],43:[1,44],51:[1,32]},{16:[1,39],18:42,24:[1,41],26:83,37:[1,40],42:[1,43],43:[1,44],51:[1,32]},{16:[1,39],18:42,24:[1,41],26:84,37:[1,40],42:[1,43],43:[1,44],51:[1,32]},{16:[1,39],18:42,24:[1,41],26:85,37:[1,40],42:[1,43],43:[1,44],51:[1,32]},{16:[1,39],18:42,24:[1,41],26:86,37:[1,40],42:[1,43],43:[1,44],51:[1,32]},{16:[1,39],18:42,24:[1,41],26:87,37:[1,40],42:[1,43],43:[1,44],51:[1,32]},{16:[1,39],18:42,24:[1,41],26:88,37:[1,40],42:[1,43],43:[1,44],51:[1,32]},{16:[1,39],18:42,24:[1,41],26:89,37:[1,40],42:[1,43],43:[1,44],51:[1,32]},{5:[2,30],14:[2,30],25:[2,30],30:[2,30],33:[2,30],35:[2,30],36:[2,30],37:[2,30],38:[2,30],39:[2,30],40:[2,30],41:[2,30],45:[2,30],46:[2,30],47:[2,30],48:[2,30],49:[2,30],50:[2,30]},{16:[1,39],18:42,24:[1,41],26:90,37:[1,40],42:[1,43],43:[1,44],51:[1,32]},{5:[2,31],14:[2,31],25:[2,31],30:[2,31],33:[2,31],35:[2,31],36:[2,31],37:[2,31],38:[2,31],39:[2,31],40:[2,31],41:[2,31],45:[2,31],46:[2,31],47:[2,31],48:[2,31],49:[2,31],50:[2,31]},{25:[1,91],36:[1,63],37:[1,64],38:[1,65],39:[1,66],40:[1,67],41:[1,68]},{10:92,16:[1,19],27:[1,20],28:[1,21],31:[1,22],34:[1,23]},{14:[1,93]},{25:[1,94]},{14:[2,11],25:[2,11]},{5:[2,19],14:[2,19],30:[2,19]},{14:[1,54],29:95,30:[2,22]},{5:[2,20],14:[2,20],30:[2,20]},{33:[2,38],35:[2,38],36:[1,63],37:[1,64],38:[1,65],39:[1,66],40:[1,67],41:[1,68]},{33:[2,39],35:[2,39],36:[1,63],37:[1,64],38:[1,65],39:[1,66],40:[1,67],41:[1,68]},{33:[2,40],35:[2,40],36:[1,63],37:[1,64],38:[1,65],39:[1,66],40:[1,67],41:[1,68]},{33:[2,41],35:[2,41],36:[1,63],37:[1,64],38:[1,65],39:[1,66],40:[1,67],41:[1,68]},{33:[2,42],35:[2,42],36:[1,63],37:[1,64],38:[1,65],39:[1,66],40:[1,67],41:[1,68]},{33:[2,43],35:[2,43],36:[1,63],37:[1,64],38:[1,65],39:[1,66],40:[1,67],41:[1,68]},{5:[2,25],14:[2,25],25:[2,25],30:[2,25],33:[2,25],35:[2,25],36:[2,25],37:[2,25],38:[1,65],39:[1,66],40:[1,67],41:[1,68],45:[2,25],46:[2,25],47:[2,25],48:[2,25],49:[2,25],50:[2,25]},{5:[2,26],14:[2,26],25:[2,26],30:[2,26],33:[2,26],35:[2,26],36:[2,26],37:[2,26],38:[1,65],39:[1,66],40:[1,67],41:[1,68],45:[2,26],46:[2,26],47:[2,26],48:[2,26],49:[2,26],50:[2,26]},{5:[2,27],14:[2,27],25:[2,27],30:[2,27],33:[2,27],35:[2,27],36:[2,27],37:[2,27],38:[2,27],39:[2,27],40:[1,67],41:[1,68],45:[2,27],46:[2,27],47:[2,27],48:[2,27],49:[2,27],50:[2,27]},{5:[2,28],14:[2,28],25:[2,28],30:[2,28],33:[2,28],35:[2,28],36:[2,28],37:[2,28],38:[2,28],39:[2,28],40:[1,67],41:[1,68],45:[2,28],46:[2,28],47:[2,28],48:[2,28],49:[2,28],50:[2,28]},{5:[2,29],14:[2,29],25:[2,29],30:[2,29],33:[2,29],35:[2,29],36:[2,29],37:[2,29],38:[2,29],39:[2,29],40:[2,29],41:[1,68],45:[2,29],46:[2,29],47:[2,29],48:[2,29],49:[2,29],50:[2,29]},{5:[2,24],14:[2,24],25:[2,24],30:[2,24],33:[2,24],35:[2,24],36:[1,63],37:[1,64],38:[1,65],39:[1,66],40:[1,67],41:[1,68],45:[2,24],46:[2,24],47:[2,24],48:[2,24],49:[2,24],50:[2,24]},{5:[2,32],14:[2,32],25:[2,32],30:[2,32],33:[2,32],35:[2,32],36:[2,32],37:[2,32],38:[2,32],39:[2,32],40:[2,32],41:[2,32],45:[2,32],46:[2,32],47:[2,32],48:[2,32],49:[2,32],50:[2,32]},{5:[2,21],14:[2,21],30:[2,21]},{9:96,16:[2,12],21:12,23:[1,13],27:[2,12],28:[2,12],31:[2,12],34:[2,12]},{5:[2,16],14:[2,16],30:[2,16]},{30:[2,23]},{16:[2,13],27:[2,13],28:[2,13],31:[2,13],34:[2,13]}],
defaultActions: {10:[2,1],50:[2,6],95:[2,23]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

var symbol_e = [];
symbol_e[0] = [];
var Index = 0;

var symbol_table = {};
var ambito = {};

function downIndex() {
   Index--;
}

function upIndex() {
   Index++;
   symbol_e[Index] = [];
}

function odd (n) {
   return (n%2)==0 ? 1 : 0
}

/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var reserved_words ={ PI: 'PI',
                      E : 'E',
                      CONST: 'const',
                      VAR: 'var',
                      PROCEDURE: 'procedure',
                      CALL: 'call',
                      BEGIN: 'begin',
                      END: 'end',
                      IF: 'if',
                      THEN: 'then',
                      WHILE: 'while',
                      DO: 'do',
                      ODD: 'odd'}

function idORrw(x) {
  return (x.toUpperCase() in reserved_words)? x.toUpperCase() : 'ID'
}


var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and comments */
break;
case 1:return 51
break;
case 2:return idORrw(yy_.yytext)
break;
case 3:return yy_.yytext;
break;
case 4:return yy_.yytext;
break;
case 5:return yy_.yytext;
break;
case 6:return 5
break;
case 7:return 6
break;
case 8:return 'INVALID'
break;
}
},
rules: [/^(?:\s+|#.*)/,/^(?:\b\d+(\.\d*)?([eE][-+]?\d+)?\b)/,/^(?:\b[A-Za-z_]\w*\b)/,/^(?:[-*/+^!%=();,])/,/^(?:[<>=!][=])/,/^(?:[<>])/,/^(?:\.)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = calculator;
exports.Parser = calculator.Parser;
exports.parse = function () { return calculator.parse.apply(calculator, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}